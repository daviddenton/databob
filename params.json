{"name":"Databob","tagline":"Random JS object generation for tests","body":"#databob\r\n[![NPM version](https://badge.fury.io/js/databob.svg)](http://badge.fury.io/js/databob)\r\n[![Build Status](https://travis-ci.org/daviddenton/databob.png?branch=master)](https://travis-ci.org/daviddenton/databob)\r\n[![Coverage Status](https://coveralls.io/repos/daviddenton/databob/badge.png)](https://coveralls.io/r/daviddenton/databob)\r\n[![Dependency Status](https://david-dm.org/daviddenton/databob.png)](https://david-dm.org/daviddenton/databob)\r\n[![devDependency Status](https://david-dm.org/daviddenton/databob/dev-status.png)](https://david-dm.org/daviddenton/databob#info=devDependencies)\r\n\r\nGiven an example JS object, generates random examples of JavaScript objects for usage in tests. \r\nThink automatic builder objects where you only supply an example object.\r\n\r\nSupports generation of object trees containing all of the primitive JS types, plus:\r\n- NaN, Â±Infinity, undefined, null\r\n- native Dates\r\n- arrays and nested arrays\r\n- child objects\r\n- common timestamp formats, such as ISO8601\r\n- pluggable custom formats\r\n- \"format safe\" overriding of values\r\n\r\nThis is useful for a number of reasons:\r\n- reduces need for boilerplate test-code/duplication \r\n- increases resiliency of tests by enforcing explicit reliance only on important properties (rather \r\nthan implicit properties of a commonly-built data object)\r\n- simple \"cut and paste\" updating of data formats (which means you only need to update the \r\nexample models in one place)\r\n- strict-mode overriding will break should the template suddenly becomes inconsistent with example \r\nmodel\r\n\r\n###Installation\r\nVia npm, simply run: ```npm install databob```\r\n\r\n###Features\r\nGiven an example object:\r\n```javascript\r\n> var book = {\r\n    name: 'lord of the rings',\r\n    pages: 500,\r\n    simpleNames: false,\r\n    movie: [ 180, 'elijah wood', true],\r\n    author: {\r\n        name: 'tolkien',\r\n        dead: true\r\n    }\r\n};\r\n```\r\n\r\nMake a simple random bean from the passed model:\r\n```javascript\r\n> databob.make(book)\r\n{\r\n     name: 'diam praesent',\r\n     pages: 373,\r\n     simpleNames: false,\r\n     movie: [ 140, 'nunc metus', true ],\r\n     author: { name: 'dictum in', dead: true }\r\n}\r\n```\r\n\r\nOverride the values of the generated instance. By default, strict-mode is enabled so overriding non-existent values will blow up:\r\n```javascript\r\n> databob.make(book, {\r\n    name: 'Harry Potter and the English Accent'\r\n});\r\n\r\n{\r\n     name: 'Harry Potter and the English Accent',\r\n     pages: 146,\r\n     simpleNames: false,\r\n     movie: [ 432, 'lorem ipsum', true ],\r\n     author: { name: 'ullamcorper', dead: false }\r\n}\r\n```\r\n\r\nMerge additional the values into the generated instance:\r\n```javascript\r\n> databob.make(book, {\r\n    ibsn: '978-3-16-148410-0'\r\n}, true);\r\n\r\n{\r\n     name: 'orci',\r\n     pages: 26,\r\n     simpleNames: true,\r\n     movie: [ 54, 'purus', true ],\r\n     author: { name: 'elementum', dead: false },\r\n     ibsn: '978-3-16-148410-0'\r\n}\r\n```\r\n\r\nRegister a example model under a name:\r\n```javascript\r\n> databob.register({\r\n    Book: book\r\n});\r\n```\r\n\r\n...then recall it repeatedly under that name...\r\n```javascript\r\n> databob.Book();\r\n```\r\n\r\nOverride values of a generated instance using the same mechanism as above:\r\n```javascript\r\n> databob.Book({\r\n    ibsn: '978-3-16-148410-1'\r\n}, true);\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}